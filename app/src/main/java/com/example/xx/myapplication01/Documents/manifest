manifest的意思是货单，安卓应用中AndroidManifest.xml文件每个应用根目录中都必须包含一个，
这个文件中包含了APP的各种配置信息。


AndroidManifest作用：

1.提供软件包名。这就是我们的apk的名字，通常我们的名字都是类似"com.android.xxx"这种，
和Java类名类似，目的是确定使其成为一个唯一值。

2.描述应用的各个组件。这是用来定义四大组件用的。我们最常用的就是Activity组件。它需要
定义组件的表现形式（组件名、主题、启动类型），组件可以响应的操作（例如某个启动意图）等。

3.确定托管应用组件的进程。

4.声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互。还声明其他应用
与该应用组件交互所需具备的权限.

5.列出 Instrumentation类，这些类可在应用运行时提供分析和其他信息。这些声明只会在应
用处于开发阶段时出现在清单中，在应用发布之前将移除。

6.声明应用所需最低Android API级别.这个级别在build.gradle文件中也能定义，字段是
minSdkVersion。在AndroidManifest.xml文件中定义的情况比较少。

7.列出必要的lib库。这东西在3.0以后的Android Studio似乎也没什么功能，因为在3.0以后
编译用的是CMakeLists.txt文件，以及build.gradle文件来指定库。


官方介绍文档中的AndroidManifest.xml文件：

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.sample.teapot"
          android:versionCode="1"
          android:versionName="1.0.0.1" >

  <uses-feature android:glEsVersion="0x00020000"></uses-feature>

  <application
      android:allowBackup="false"
      android:fullBackupContent="false"
      android:supportsRtl="true"
      android:icon="@mipmap/ic_launcher"
      android:label="@string/app_name"
      android:theme="@style/AppTheme"
      android:name="com.sample.teapot.TeapotApplication"
      >

    <!-- Our activity is the built-in NativeActivity framework class.
         This will take care of integrating with our NDK code. -->
    <activity android:name="com.sample.teapot.TeapotNativeActivity"
              android:label="@string/app_name"
              android:configChanges="orientation|keyboardHidden">
      <!-- Tell NativeActivity the name of our .so -->
      <meta-data android:name="android.app.lib_name"
                 android:value="TeapotNativeActivity" />
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>
  </application>
</manifest>

xmlns:android
这个属性定义了Android命名空间。必须设置成"http://schemas.android.com/apk/res/android"。不要手动修改。
package
这是一个完整的Java语言风格包名。包名由英文字母（大小写均可）、数字和下划线组成。每个独立的名字必须以字母开头。
构建APK的时候，构建系统使用这个属性来做两件事：

1、生成R.java类时用这个名字作为命名空间（用于访问APP的资源）
比如：package被设置成com.sample.teapot，那么生成的R类就是：com.sample.teapot.R
2、用来生成在manifest文件中定义的类的完整类名。比如package被设置成com.sample.teapot，并且activity元素
被声明成<activity android:name=".MainActivity">，完整的类名就是com.sample.teapot.MainActivity。

包名也代表着唯一的application ID，用来发布应用。但是，要注意的一点是：在APK构建过程的最后一步，package名会
被build.gradle文件中的applicationId属性取代。如果这两个属性值一样，那么万事大吉，如果不一样，那就要小心了。

android:versionCode
内部的版本号。用来表明哪个版本更新。这个数字不会显示给用户。显示给用户的是versionName。这个数字必须是整数。
不能用16进制，也就是说不接受"0x1"这种参数

android:versionName
显示给用户看的版本号。

<uses-feature>元素

Google Play利用这个元素的值从不符合应用需要的设备上将应用过滤。
这东西的作用是将APP所依赖的硬件或者软件条件告诉别人。它说明了APP的哪些功能可以随设备的变
化而变化。

使用的时候要注意，必须在单独的<uses-feature>元素中指定每个功能，如果要多个功能，需要多
个<uses-feture>元素。比如要求设备同时具有蓝牙和相机功能：

<uses-feature android:name="android.hardware.bluetooth" />
<uses-feature android:name="android.hardware.camera" />

<uses-feature>的属性

android:name
该属性以字符串形式指定了APP要用的硬件或软件功能。

android:required
这项属性如果值为true表示需要这项功能否则应用无法工作，如果为false表示应用在必要时会使用
该功能，但是如果没有此功能应用也能工作。

android:glEsVersion
指明应用需要的Opengl ES版本。高16位表示主版本号，低16位表示次版本号。例如，如果是要
3.2的版本，就是0x00030002。如果定义多个glEsVersion，应用会自动启用最高的设置。

<application>元素

此元素描述了应用的配置。这是一个必备的元素，它包含了很多子元素来描述应用的组件，它的属性影响到所有的子组件。许多属性（例如icon、label、permission、process、
taskAffinity和allowTaskReparenting）都可以设置成默认值。

<application>的属性

android:allowBackup
表示是否允许APP加入到备份还原的结构中。如果设置成false，那么应用就不会备份还原。默认值为true。

android:fullBackupContent
这个属性指向了一个xml文件，该文件中包含了在进行自动备份时的完全备份规则。这些规则定义了哪些文件
需要备份。此属性是一个可选属性。默认情况下，自动备份包含了大部分app文件。

android:supportsRtl
声明你的APP是否支持RTL（Right To Left）布局。如果设置成true，并且targetSdkVersion
被设置成17或更高。很多RTL API会被集火，这样你的应用就可以显示RTL布局了。如果设置成false或者
targetSdkVersion被设置成16或更低。哪些RTL API就不起作用了。该属性的默认的值是false。

android:icon
APP的图标，以及每个组件的默认图标。可以在组价中自定义图标。这个属性必须设置成一个引用，
指向一个可绘制的资源，这个资源必须包含图片。系统不设置默认图标。例如mipmap/ic_launcher
引用的就是下面的资源.


android:label
一个用户可读的标签，以及所有组件的默认标签。子组件可以用他们的label属性定义自己的标签，如果没有定义，
那么就用这个标签。

标签必须设置成一个字符串资源的引用。这样它们就能和其他东西一样被定位，比如@string/app_name。当然，为了开发方便，
也可以定义一个原始字符串。

android:theme
该属性定义了应用使用的主题的，它是一个指向style资源的引用。各个activity也可以用自己的theme属性设置自己的主题。

android:name
Application子类的全名。包括前面的路径。例如com.sample.teapot.TeapotApplication。当应用启动时，这个类的实例被第一个创建。这个属性是可选的，
大多数APP都不需要这个属性。在没有这个属性的时候，Android会启动一个Application类的实例。

<activity>元素
该元素声明一个实现应用可视化界面的Activity（Activity类子类）。这是<application>元素中必要的子元素。所有Activity都必须由清单文件中的<activity>
元素表示。任何未在该处声明的Activity对系统都不可见，并且永远不会被执行。

android:name
Activity类的名称，是Activity类的子类。该属性值为完全限定类名称，例如com.sample.teapot.TeapotNativeActivity。为了方便起见，如果第一个字符是
点（'.'），就需要加上<manifest>元素中的包名。应用一旦发布，不应更改该名称。没有默认值，必须指定该名称。

android:label
Activity标签，可以被用户读取。该标签会在Activity激活时显示在屏幕上。如果未设置，用<application>中的label属性。对属性的设置要求和<application>中一样。

android:configChanges
列出 Activity 将自行处理的配置更改消息。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity
重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged()方法。

注：应避免使用该属性，并且只应在万不得已的情况下使用。 如需了解有关如何正确处理配置更改所致重新启动的详细信息，请阅读处理运行时变更。

这属性可以设置的项很多，这里列出常用的项：

orientation
屏幕放心啊发生了变化，比如用户旋转了设备
keyboardHidden
键盘无障碍功能发生了变化，比如用户显示了硬件键盘
android:launchMode
关于如何启动Activity的指令。一共有四种指令：
“standard”
“singleTop”
“singleTask”
“singleInstance”
默认情况下是standard。这些模式被分为两大类："standard"和"singleTop"是一类。该模式的Activity可以多次实例化。实例可属于任何任务，并且可以位于Activity
堆栈中的任何位置。"singleTask"和"singleInstance"是一类。该模式只能启动任务，它们始终位于Activity堆栈的根位置。此外，设备一次只能保留一个Activity实例。
设置成singleTask后，系统在新任务的根位置创建Activity并向其传送Intent。如果已经存在一个Activity实例，则系统会通过调用该实例的onNewIntent()方法向其传
送Intent而不是创建一个新的Activity实例。

android:theme
设定主题格式，与<application>中的theme类似。

<meta-data>元素
指定额外的数据项，该数据项是一个name-value对，提供给其父组件。这些数据会组成一个Bundle对象，可以由PackageItemInfo.metaData字段使用。虽然可以使用多个
<meta-data>元素标签，但是不推荐这么使用。如果有多个数据项要指定，推荐做法是：将多个数据项合并成一个资源，然后使用一个<meta-data>包含进去。
该元素有三个属性：

android:name
数据项名称，这是一个唯一值。

android:resource
一个资源的引用。

android:value
数据项的值。

<intent-filter>元素
指明这个activity可以以什么样的意图(intent)启动。该元素有几个子元素可以包含。我们先介绍遇到的这两个：

<action>元素
表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动。

<category>元素
这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity。





